angular.module("fluro.socket",[]),angular.module("fluro.socket").service("FluroSocket",["Fluro","$rootScope",function(Fluro,$rootScope){var socket,currentSocketID,controller={},currentAccount=(Fluro.apiURL,""),listeners=[];return"undefined"!=typeof io&&(socket=io(Fluro.apiURL,{transports:["websocket"],upgrade:!1}),$rootScope.$watch("user.account._id",function(){var user=$rootScope.user;user?user.account&&user.account._id?(currentAccount=user.account._id,controller.join(currentAccount)):controller.leave(currentAccount):currentAccount&&controller.leave(currentAccount)})),controller.getSocketID=function(){return currentSocketID},controller.join=function(roomName){socket&&(socket.on("connect",function(){currentSocketID=socket.io.engine.id,socket.emit("subscribe",{room:roomName})}),socket.on("reconnect",function(){currentSocketID=socket.io.engine.id,socket.emit("subscribe",{room:roomName})}),socket.on("disconnect",function(){currentSocketID=null}),_.each(listeners,function(listener){socket.on(listener)}))},controller.leave=function(roomName){socket&&(socket.emit("unsubscribe",{room:roomName}),socket.off("connect"),socket.off("reconnect"),socket.off("disconnect"),_.each(listeners,function(listener){socket.off(listener)}))},controller.emit=function(roomName,key,data){socket&&(console.log("Emit to room",roomName,socket),socket.emit(key,data))},controller.on=function(event,callback){var alreadyListening=_.find(listeners,function(listener){var sameCallback=listener.callback==callback,sameEvent=listener.event==event;return sameCallback&&sameEvent});return alreadyListening?console.log("Already listening for ",event):(listeners.push({event:event,callback:callback}),void(socket&&socket.on(event,callback)))},controller.off=function(event,callback){if(callback){var match=_.find(listeners,function(listener){var sameCallback=listener.callback==callback,sameEvent=listener.event==event;return sameCallback&&sameEvent});match&&(_.pull(listeners,match),socket&&socket.removeListener(event,callback))}else listeners=_.filter(listeners,function(listener){return listener.event!=event}),socket&&socket.off(event)},controller}]);