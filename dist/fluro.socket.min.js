angular.module("fluro.socket",[]),angular.module("fluro.socket").service("FluroSocket",["Fluro","$rootScope",function(Fluro,$rootScope){var socket,currentSocketID,controller={},currentAccount=(Fluro.apiURL,""),listeners=[];return controller.init=function(){return console.log("init socket server"),"undefined"==typeof io?console.log("io is not defined"):(console.log("connecting to socket server"),socket=io(Fluro.apiURL,{transports:["websocket"],upgrade:!1}),void $rootScope.$watch("user.account._id",function(userAccountID){console.log("user account change"),userAccountID?(console.log("connect to ",userAccountID),currentAccount=userAccountID,controller.join(currentAccount)):currentAccount&&(console.log("leave current channel"),controller.leave(currentAccount))}))},controller.getSocketID=function(){return currentSocketID},controller.join=function(roomName){return socket?(socket.on("connect",function(){currentSocketID=socket.io.engine.id,console.log("connected to socket channel "+roomName),socket.emit("subscribe",{room:roomName})}),socket.on("reconnect",function(){currentSocketID=socket.io.engine.id,console.log("reconnected to socket channel "+roomName),socket.emit("subscribe",{room:roomName})}),socket.on("disconnect",function(){currentSocketID=null,console.log("disconnected from socket channel")}),void _.each(listeners,function(listener){socket.on(listener)})):console.log("window.socket is not defined so can not join channel")},controller.leave=function(roomName){return socket?(console.log("leave",roomName),socket.emit("unsubscribe",{room:roomName}),socket.off("connect"),socket.off("reconnect"),socket.off("disconnect"),void _.each(listeners,function(listener){socket.off(listener)})):console.log("window.socket is not defined so can not leave channel")},controller.emit=function(roomName,key,data){socket&&(console.log("Emit to room",roomName,socket),socket.emit(key,data))},controller.on=function(event,callback){var alreadyListening=_.find(listeners,function(listener){var sameCallback=listener.callback==callback,sameEvent=listener.event==event;return sameCallback&&sameEvent});return alreadyListening?console.log("socket already listening for ",event):(listeners.push({event:event,callback:callback}),void(socket&&socket.on(event,callback)))},controller.off=function(event,callback){if(callback){var match=_.find(listeners,function(listener){var sameCallback=listener.callback==callback,sameEvent=listener.event==event;return sameCallback&&sameEvent});match&&(_.pull(listeners,match),socket&&socket.removeListener(event,callback))}else listeners=_.filter(listeners,function(listener){return listener.event!=event}),socket&&socket.off(event)},controller.init(),controller}]);